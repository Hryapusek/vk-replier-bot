${STATUS_CHECK_TIME}
${SERVER_CREATION_ERROR_RESTART_TIME}
${ADD_TARGET_CMD}
${ADD_SOURCE_CMD}
${TARGET_CHATS_FILE_NAME}
${SOURCE_CHAT_FILE_NAME}
TOKEN_FILE_NAME

Основные цели:
  - Бот должен быть отказоустойчивым.
  - Бот должен сообщать своё состояние каждый ${STATUS_CHECK_TIME} в личку кому нибудь.
  - При ошибке создания сервера бот должен попытаться снова через ${SERVER_CREATION_ERROR_RESTART_TIME}.
  - Бот должен отслеживать message_new event.
  - Бот должен запускаться при запуске системы.
  - Бот должен считывать токен и source-target беседы при запуске.
  - Бот должен уметь работать в двух режимах:
    1. Режим настройки. Можно задавать source-target беседы
        с помощью команд ${ADD_TARGET_CMD} и ${ADD_SOURCE_CMD}.
    2. Режим работы. Использование ${ADD_TARGET_CMD} и ${ADD_SOURCE_CMD}
        не будет иметь эффекта.

Используемые библиотеки:
  - "jsoncpp"         нужно чтобы удобно парсить json.
  - "Boost.Log"       ну тут понятно да.
  - "libhttpserver"   простая и вроде как приятная библиотека для поднятия сервера.
  - "cpr"             нужно для легкого использования http запросов.

Механизм работы:
  1. Первоначальная настройка. Режим настройки.
    1.1 При запуске бот создаст файл ЕСЛИ УЖЕ НЕ СУЩЕСТВУЕТ ${TARGET_CHATS_FILE_NAME} 
          который будет хранить map с
          парами (блок : айди беседы). Также будет создан файл ЕСЛИ УЖЕ НЕ СУЩЕСТВУЕТ 
          ${SOURCE_CHAT_FILE_NAME}, который будет хранить единственное число - айди беседы студсовета.
    1.2 С помощью команд ${ADD_TARGET_CMD} и ${ADD_SOURCE_CMD} необходимо настроить бота. При вызове 
          каждой из команд - файлы будут перезаписываться.
    1.3 Дальше необходимо перезапустить бота в режиме работы.